name: Tests

on:
  workflow_call:

jobs:
  lint-and-unit-test:
    name: Lint and unit tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: python3 -m pip install tox
      - name: Run tests
        run: tox --result-json=test-result.json
      - name: Export test report
        if: always()
        id: export-test-report
        uses: actions/github-script@v6.2.0
        with:
          script: |
            const sha = '${{ github.event.pull_request.head.sha }}';
            const fs = require('fs');
            let result = JSON.parse(fs.readFileSync('test-result.json', 'utf8'));
            
            let testenvs = result.testenvs;
            let lint_result = testenvs.lint.test;
            let lint_success = true;
            let lint_output = '';
            for (let lint_test_result of lint_result) {
              if (lint_test_result.retcode != 0) {
                lint_success = false;
              }
              if (lint_test_result.output) {
                lint_output += lint_test_result.output;
              }
            }
            let unit_result = testenvs.unit.test;
            let unit_success = unit_result[0].retcode == 0;
            let unit_output = unit_result[0].output;
            let static_result = testenvs.static.test;
            let static_output = static_result[0].output;
            let coverage_result = testenvs["coverage-report"].test;
            let coverage_output = coverage_result[0].output;

            let reports = [];
            if (!lint_success) {
              reports.push(
                `Lint checks failed for ${sha}\n
                \`\`\`\n${lint_output.trim()}\n\`\`\``
              );
            }
            if (!unit_success) {
              reports.push(
                `Unit tests failed for ${sha}\n
                \`\`\`\n${unit_output.trim()}\n\`\`\``
              );
            }
            reports.push(
              `Test coverage for ${sha}\n
              \`\`\`\n${coverage_output.trim()}\n\`\`\`
              Static code analysis report\n
              \`\`\`\n${static_output.trim()}\n\`\`\``
            );
            let json = JSON.stringify(reports);
            fs.writeFileSync('report.json', json);
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: always() && github.event_name == 'pull_request'
        with:
          name: report
          path: report.json
