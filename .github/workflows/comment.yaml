# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

name: Comment on the pull request

on:
  workflow_call:
  workflow_run:
    workflows: ["Workflow Unit tests"]
    types: [completed]

env:
  ARTIFACT_NAME: "report"

jobs:
  comment-on-prs:
    name: Comment on PRs
    runs-on: ubuntu-24.04
    if: github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          repository: ${{ github.event.workflow_run.repository.full_name }}
          run-id: ${{ github.event.workflow_run.id }}
          pattern: "${{ env.ARTIFACT_NAME }}-*"
      - name: Comment on PR
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const artifact = '${{ env.ARTIFACT_NAME }}';
            const owner = context.payload.workflow_run.repository.owner.login;
            const repo = context.payload.workflow_run.repository.name;
            const sha = context.payload.workflow_run.head_sha
            const header = `## Test results for commit ${sha}\n\n`;
            const comments = fs.readdirSync('.')
                .filter(d => fs.statSync(d).isDirectory() && d.startsWith(`${artifact}-`))
                .map(dir => `${dir}/${artifact}.json`)
                .filter(fs.existsSync)
                .flatMap(filePath => JSON.parse(fs.readFileSync(filePath, 'utf8')));

            const pull = (await github.rest.pulls.list({
                owner: owner,
                repo: repo,
            })).data.filter(pr => pr.head.sha == sha)[0];
            const issue_number = pull.number;

            const createComment = async (body) => {
                await github.rest.issues.createComment({
                    owner: owner,
                    repo: repo,
                    issue_number: issue_number,
                    header + body,
                });
            }

            const deleteGithubActionsComments = async () => {
                const existingComments = await github.rest.issues.listComments({
                    owner: owner,
                    repo: repo,
                    issue_number: issue_number,
                });
                const githubActionsComments = existingComments.data.filter(
                    comment =>
                      comment.user.login == 'github-actions[bot]' &&
                      !comment.body.startsWith(header),
                );
                for (const comment of githubActionsComments) {
                    await github.rest.issues.deleteComment({
                        owner: owner,
                        repo: repo,
                        comment_id: comment.id,
                    });
                }
            }

            await deleteGithubActionsComments();
            for (const comment of comments) {
                await createComment(comment);
            }
