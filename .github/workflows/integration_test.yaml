name: Integration tests

on:
  workflow_call:
    inputs:
      extra-arguments:
        description: Additional arguments to pass to the integration test execution
        type: string
      pre-run-script:
        description: Path to the bash script to be run before the integration tests
        type: string
      provider:
        description: Actions operator provider as per https://github.com/charmed-kubernetes/actions-operator#usage
        type: string
        default: microk8s
      runs-on:
        description: Runner image for the integration tests
        type: string
        default: ubuntu-20.04
      series:
        description: List of series to run the tests in JSON format, i.e. '["jammy", "focal"]'. Each element will be passed to tox as --series argument
        type: string
        default: '[""]'
    outputs:
      images:
        description: Pushed docker images
        value: ${{ jobs.get-images.outputs.images }}

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  get-images:
    name: Get images
    runs-on: ubuntu-20.04
    outputs:
      images: ${{ env.DOCKER_IMAGES }}
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - uses: actions/checkout@v3
      - name: Get dockerfiles
        id: set-images
        run: echo "DOCKER_IMAGES=$(ls *.Dockerfile 2> /dev/null | sed s/\.Dockerfile// |  jq -Rsc '. / "\n" - [""]')" >> $GITHUB_ENV
  build-images:
    name: Build image
    runs-on: ubuntu-20.04
    needs: get-images
    strategy:
      matrix:
        image: ${{ fromJSON(needs.get-images.outputs.images) }}
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: |
          echo '${{ github.event.workflow_run.event != 'pull_request' || github.event.pull_request.base.repo.full_name == github.event.pull_request.base.head.full_name}}'
      - uses: actions/checkout@v3
      - name: Log in to the Container registry
        if: ${{ github.event.pull_request.base.repo.full_name != github.event.pull_request.base.head.full_name}}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v3
        if: ${{ github.event.workflow_run.event != 'pull_request' || github.event.pull_request.base.repo.full_name == github.event.pull_request.base.head.full_name }}
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.image }}:${{ github.run_id }}
          file: ${{ matrix.image }}.Dockerfile
      - name: Build image and publish artifact
        uses: docker/build-push-action@v3
        if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.pull_request.base.repo.full_name != github.event.pull_request.base.head.full_name }}
        with:
          context: .
          file: ${{ matrix.image }}.Dockerfile
          outputs: type=docker,dest=/tmp/${{ matrix.image }}.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.pull_request.base.repo.full_name != github.event.pull_request.base.head.full_name }}
        with:
          name: ${{ matrix.image }}
          path: /tmp/${{ matrix.image }}.tar

  integration-test:
    name: Integration tests
    strategy:
      matrix:
        series: ${{ fromJSON(inputs.series) }}
      fail-fast: false
    runs-on: ${{ inputs.runs-on }}
    needs: [get-images, build-images]
    if: ${{ !failure() }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.pull_request.base.repo.full_name != github.event.pull_request.base.head.full_name }}  
        with:
          provider: ${{ inputs.provider }}
      - name: Enable microk8s registry
        # Add a step to wait for the registry to become available after it has
        # been deployed to avoid any issues with trying to push images to it
        # before it is ready
        run: |
          sudo microk8s.enable registry
          sudo microk8s.kubectl -n container-registry rollout status -w deployment/registry
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.pull_request.base.repo.full_name != github.event.pull_request.base.head.full_name }}  
        with:
          name: ${{ inputs.resource-name }}
          path: /tmp
      - name: Push images to microk8s registry
        if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.pull_request.base.repo.full_name != github.event.pull_request.base.head.full_name }}  
        run: |
          for image_name in $(echo '${{ needs.get-images.outputs.images }}' | jq -cr '.[]'); do
            imageId=$(docker load --input ${image_name}/${image_name}.tar | sed -e "s/^Loaded image ID: //")
            docker tag $imageId localhost:32000/${image_name}:latest
            docker push localhost:32000/${image_name}:latest
          done
      - name: Configure GHCR in microk8s
        if: ${{ inputs.provider == 'microk8s' &&  (github.event.workflow_run.event != 'pull_request' || github.event.pull_request.base.repo.full_name == github.event.pull_request.base.head.full_name) }}
        run: |
          # Adding authentication for ghcr.io for containerd as per https://microk8s.io/docs/registry-private
          # Note: containerd has to be restarted for the changes to take effect
          # (https://github.com/containerd/cri/blob/master/docs/registry.md)
          sudo su -c 'echo "
          [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"ghcr.io\".auth]
          username = \"${{ github.actor }}\"
          password = \"${{ secrets.GITHUB_TOKEN }}\"
          " >> /var/snap/microk8s/current/args/containerd-template.toml'
          sudo su -c 'systemctl restart snap.microk8s.daemon-containerd.service && microk8s status --wait-ready'
      - name: Pre-run script
        if: ${{ inputs.pre-run-script != '' }}
        run: bash ${{ inputs.pre-run-script }}
      - name: Run integration tests
        run: |
          echo "CHARM_NAME=$(yq '.name' metadata.yaml)" >> $GITHUB_ENV
          args=""
          for image_name in $(echo '${{ needs.get-images.outputs.images }}' | jq -cr '.[]'); do
            args="${args} --${image_name}-image ${{ env.REGISTRY }}/${{ env.OWNER }}/${image_name}:${{ github.run_id }}"
          done

          series=""
          if [ ! -z ${{ matrix.series }} ]; then
            series="--series ${{ matrix.series }}"
          fi
          tox -e integration -- --model testing $series $args ${{ inputs.extra-arguments }}
      - name: Dump logs
        uses: canonical/charm-logdump-action@main
        if: failure()
        with:
          app: ${{ env.CHARM_NAME }}
          model: testing
